/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.aaronps.camview;

import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author krom
 */
public class MainFrame extends javax.swing.JFrame implements CameraThread.Listener
{
    private static final Logger logger = Logger.getLogger("MainFrame");
    private static final String VERSION = "0.4";

    private CameraThread mCameraThread;
    private FrameRequester mFrameRequester;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        mIpTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        mPortTextField = new javax.swing.JTextField();
        mConnectButton = new javax.swing.JButton();
        mDisconnectButton = new javax.swing.JButton();
        mCameraView = new com.aaronps.camview.CameraView();
        mRotation0Button = new javax.swing.JToggleButton();
        mRotation1Button = new javax.swing.JToggleButton();
        mRotation2Button = new javax.swing.JToggleButton();
        mRotation3Button = new javax.swing.JToggleButton();
        mVideoSizesCombo = new javax.swing.JComboBox<>();
        mPlayButton = new javax.swing.JButton();
        mFPSLimitTextField = new javax.swing.JTextField();
        mFPSLimitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HomeDroid Viewer " + VERSION);

        jLabel1.setText("IP");

        mIpTextField.setText("192.168.0.3");

        jLabel2.setText("Port");

        mPortTextField.setText("19999");

        mConnectButton.setText("Connect");
        mConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mConnectButtonActionPerformed(evt);
            }
        });

        mDisconnectButton.setText("Disconnect");
        mDisconnectButton.setEnabled(false);
        mDisconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mDisconnectButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(mRotation0Button);
        mRotation0Button.setText("0");
        mRotation0Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mRotation0ButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(mRotation1Button);
        mRotation1Button.setText("90");
        mRotation1Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mRotation1ButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(mRotation2Button);
        mRotation2Button.setText("180");
        mRotation2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mRotation2ButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(mRotation3Button);
        mRotation3Button.setText("270");
        mRotation3Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mRotation3ButtonActionPerformed(evt);
            }
        });

        mVideoSizesCombo.setEnabled(false);

        mPlayButton.setText("Play");
        mPlayButton.setEnabled(false);
        mPlayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mPlayButtonActionPerformed(evt);
            }
        });

        mFPSLimitTextField.setText("66");

        mFPSLimitButton.setText("FPS Limit");
        mFPSLimitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mFPSLimitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(mRotation0Button)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mRotation1Button)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mRotation2Button)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mRotation3Button))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(mIpTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(mConnectButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mDisconnectButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(mVideoSizesCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mPlayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(mFPSLimitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(mFPSLimitTextField))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(mCameraView, javax.swing.GroupLayout.DEFAULT_SIZE, 585, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(mIpTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(mPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mConnectButton)
                    .addComponent(mDisconnectButton)
                    .addComponent(mFPSLimitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mRotation0Button)
                    .addComponent(mRotation1Button)
                    .addComponent(mRotation2Button)
                    .addComponent(mRotation3Button)
                    .addComponent(mVideoSizesCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mPlayButton)
                    .addComponent(mFPSLimitButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mCameraView, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mConnectButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mConnectButtonActionPerformed
    {//GEN-HEADEREND:event_mConnectButtonActionPerformed
        if ( mCameraThread == null )
        {
            mCameraThread = new CameraThread(this, mIpTextField.getText(), Integer.parseInt(mPortTextField.getText()));
            mConnectButton.setEnabled(false);
            mDisconnectButton.setEnabled(true);
            mCameraThread.start();
            mFrameRequester = new FrameRequester(mCameraThread);
        }
    }//GEN-LAST:event_mConnectButtonActionPerformed

    private void mDisconnectButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mDisconnectButtonActionPerformed
    {//GEN-HEADEREND:event_mDisconnectButtonActionPerformed
        if ( mCameraThread != null )
        {
            CameraThread t = mCameraThread;
            mCameraThread = null;
            
            mConnectButton.setEnabled(true);
            mDisconnectButton.setEnabled(false);
            
            mVideoSizesCombo.removeAllItems();
            mVideoSizesCombo.setEnabled(false);
            mPlayButton.setEnabled(false);
            mPlayButton.setText("Play");
            
            mCameraView.reset();
            mCameraView.repaint();
            
            mFrameRequester.shutdown();
            mFrameRequester = null;
            try
            {
                t.stop();
            }
            catch (InterruptedException ex)
            {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }//GEN-LAST:event_mDisconnectButtonActionPerformed

    private void mRotation0ButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mRotation0ButtonActionPerformed
    {//GEN-HEADEREND:event_mRotation0ButtonActionPerformed
        mCameraView.setRotation(0);
        mCameraView.repaint();
    }//GEN-LAST:event_mRotation0ButtonActionPerformed

    private void mRotation1ButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mRotation1ButtonActionPerformed
    {//GEN-HEADEREND:event_mRotation1ButtonActionPerformed
        mCameraView.setRotation(1);
        mCameraView.repaint();
    }//GEN-LAST:event_mRotation1ButtonActionPerformed

    private void mRotation2ButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mRotation2ButtonActionPerformed
    {//GEN-HEADEREND:event_mRotation2ButtonActionPerformed
        mCameraView.setRotation(2);
        mCameraView.repaint();
    }//GEN-LAST:event_mRotation2ButtonActionPerformed

    private void mRotation3ButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mRotation3ButtonActionPerformed
    {//GEN-HEADEREND:event_mRotation3ButtonActionPerformed
        mCameraView.setRotation(3);
        mCameraView.repaint();
    }//GEN-LAST:event_mRotation3ButtonActionPerformed

    private void mPlayButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mPlayButtonActionPerformed
    {//GEN-HEADEREND:event_mPlayButtonActionPerformed
        if ( mPlayButton.getText().equals("Play") )
        {
            final String selectedSize = (String) mVideoSizesCombo.getSelectedItem();
            logger.info("Selected: " + selectedSize);
            
            mVideoSizesCombo.setEnabled(false);
            mPlayButton.setText("Stop");
            
            final String[] parts = selectedSize.split("x");
            final int w = Integer.parseInt(parts[0]), h = Integer.parseInt(parts[1]);
            
            mCameraView.setImageSize(w, h);
            mCameraView.repaint();
            
            mCameraThread.request_beginvideo(selectedSize);
        }
        else
        {
            mVideoSizesCombo.setEnabled(true);
            mPlayButton.setText("Play");
            mCameraThread.request_stopvideo();
        }
    }//GEN-LAST:event_mPlayButtonActionPerformed

    private void mFPSLimitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mFPSLimitButtonActionPerformed
        int limit = Math.max(0, Integer.parseInt(mFPSLimitTextField.getText()));
        mFrameRequester.setMinDelay(limit);
        
    }//GEN-LAST:event_mFPSLimitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private com.aaronps.camview.CameraView mCameraView;
    private javax.swing.JButton mConnectButton;
    private javax.swing.JButton mDisconnectButton;
    private javax.swing.JButton mFPSLimitButton;
    private javax.swing.JTextField mFPSLimitTextField;
    private javax.swing.JTextField mIpTextField;
    private javax.swing.JButton mPlayButton;
    private javax.swing.JTextField mPortTextField;
    private javax.swing.JToggleButton mRotation0Button;
    private javax.swing.JToggleButton mRotation1Button;
    private javax.swing.JToggleButton mRotation2Button;
    private javax.swing.JToggleButton mRotation3Button;
    private javax.swing.JComboBox<String> mVideoSizesCombo;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onConnected(CameraThread ct)
    {
        logger.info("Connected!!!!");
        ct.request_sizelist();
    }

    @Override
    public void onDisconnected(CameraThread ct)
    {
        logger.info("Disconnected");
        mVideoSizesCombo.removeAllItems();
        mVideoSizesCombo.setEnabled(false);
        mPlayButton.setEnabled(false);
        mPlayButton.setText("Play");
        mCameraView.reset();
        mCameraView.repaint();
    }

    @Override
    public void onVideoReady(CameraThread ct, CameraInfo info)
    {
        logger.info("Info received: " + info);
        mFrameRequester.request_pic();
    }

    @Override
    public void onSizeListReceived(CameraThread ct, String[] sizes)
    {
        logger.info("Sizes received: " + Arrays.toString(sizes));
        mVideoSizesCombo.removeAllItems();
        for ( String s: sizes )
        {
            mVideoSizesCombo.addItem(s);
        }
        
        mVideoSizesCombo.setEnabled(true);
        mVideoSizesCombo.setSelectedIndex(0);
        mPlayButton.setEnabled(true);
    }

    @Override
    public void onFrameReceived(CameraThread ct, byte[] frame)
    {
        mFrameRequester.request_pic();
        mCameraView.updatePic(frame);
    }
}
